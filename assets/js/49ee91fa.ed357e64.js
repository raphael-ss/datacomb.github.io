"use strict";(self.webpackChunkdatacomb=self.webpackChunkdatacomb||[]).push([[2930],{3905:(e,n,a)=>{a.d(n,{Zo:()=>p,kt:()=>k});var t=a(7294);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var m=t.createContext({}),l=function(e){var n=t.useContext(m),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},p=function(e){var n=l(e.components);return t.createElement(m.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,r=e.originalType,m=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(a),c=o,k=u["".concat(m,".").concat(c)]||u[c]||d[c]||r;return a?t.createElement(k,s(s({ref:n},p),{},{components:a})):t.createElement(k,s({ref:n},p))}));function k(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=a.length,s=new Array(r);s[0]=c;var i={};for(var m in n)hasOwnProperty.call(n,m)&&(i[m]=n[m]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<r;l++)s[l]=a[l];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}c.displayName="MDXCreateElement"},6998:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>m,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var t=a(7462),o=(a(7294),a(3905));const r={sidebar_position:2,slug:"/docs/basic-programming/python-lists",title:"Python - Lists"},s="Python - Listas",i={unversionedId:"prog1/python-lists",id:"prog1/python-lists",title:"Python - Lists",description:"Listas em Python s\xe3o estruturas iter\xe1veis, que possibilitam armazenamento de diversos valores de forma ordenada e indexada.",source:"@site/docs/prog1/python-lists.md",sourceDirName:"prog1",slug:"/docs/basic-programming/python-lists",permalink:"/docs/basic-programming/python-lists",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,slug:"/docs/basic-programming/python-lists",title:"Python - Lists"},sidebar:"tutorialSidebar",previous:{title:"Python - Basics",permalink:"/docs/basic-programming/python"},next:{title:"Python - Strings",permalink:"/docs/basic-programming/python-strings"}},m={},l=[{value:"\xcdndices e <em>Slicing</em>",id:"\xedndices-e-slicing",level:2},{value:"\xcdndices",id:"\xedndices",level:3},{value:"len()",id:"len",level:3},{value:"<em>Slicing</em>",id:"slicing",level:3},{value:"M\xe9todos de Listas",id:"m\xe9todos-de-listas",level:2},{value:"append()",id:"append",level:3},{value:"remove()",id:"remove",level:3},{value:"count()",id:"count",level:3},{value:"insert()",id:"insert",level:3},{value:"pop()",id:"pop",level:3},{value:"sort()",id:"sort",level:3},{value:"reverse()",id:"reverse",level:3},{value:"clear()",id:"clear",level:3},{value:"extend()",id:"extend",level:3},{value:"copy()",id:"copy",level:3},{value:"sorted()",id:"sorted",level:2},{value:"Descompacta\xe7\xe3o de Listas",id:"descompacta\xe7\xe3o-de-listas",level:2},{value:"Compreens\xe3o de Listas",id:"compreens\xe3o-de-listas",level:2},{value:"zip()",id:"zip",level:2},{value:"Conclus\xe3o \ud83c\udf91",id:"conclus\xe3o-",level:2}],p={toc:l},u="wrapper";function d(e){let{components:n,...a}=e;return(0,o.kt)(u,(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"python---listas"},"Python - Listas"),(0,o.kt)("p",null,"Listas em Python s\xe3o ",(0,o.kt)("strong",{parentName:"p"},"estruturas iter\xe1veis"),", que possibilitam ",(0,o.kt)("strong",{parentName:"p"},"armazenamento de diversos valores de forma ordenada e indexada"),".\nEssa estrutura de dados \xe9 extremamente \xfatil para diversas tarefas e procedimentos. \xc9 similar a uma ",(0,o.kt)("em",{parentName:"p"},"array"),", presente em outras linguagens,\nmas possui algumas funcionalidades diferentes."),(0,o.kt)("p",null,'Listas s\xe3o delimitadas por colchetes "',(0,o.kt)("strong",{parentName:"p"},"[]"),'", e seus elementos s\xe3o separados por v\xedrgulas. Para declarar uma lista, podemos fazer de duas formas:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"list_1 = [] #-Lista vazia\n\nlist_2 = list() #-Lista vazia\n")),(0,o.kt)("p",null,"Veja alguns exemplos de listas com elementos:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"numbers = [1, 2, 3, 4, 5]\n\nwords = ['Hello', 'World']\n\nmixed_list = ['ABC', 1, 2, 3, True, 25.5]\n\nlist_of_lists = [[1, 'Jenny'], [2, 'Karl']]\n")),(0,o.kt)("p",null,"Como o exemplo acima sugere, listas s\xe3o ",(0,o.kt)("strong",{parentName:"p"},"estruturas heterog\xeaneas"),", isto \xe9, podem conter diferentes tipos de dados."),(0,o.kt)("admonition",{title:"Listas 2D ",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Para acessar elementos de uma lista 2D, fazemos:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-python"},"list_of_lists = [[1, 'Jenny'], [2, 'Karl']]\n\nname_1 = list_of_lists[0][1]\n\nprint(name_1)\n\n#->> Jenny\n"))),(0,o.kt)("p",null,'Podemos usar tamb\xe9m o operador "',(0,o.kt)("strong",{parentName:"p"},"+"),"\" para 'concatenar' listas:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"names_1 = [\"Jenny\", \"Karl\", \"Bob\"]\nnames_2 = [\"Paul\", \"Gary\"]\n\nnames = names_1 + names_2\n\nprint(names)\n\n#->>['Jenny', 'Karl', 'Bob', 'Paul', 'Gary']\n")),(0,o.kt)("h2",{id:"\xedndices-e-slicing"},"\xcdndices e ",(0,o.kt)("em",{parentName:"h2"},"Slicing")),(0,o.kt)("h3",{id:"\xedndices"},"\xcdndices"),(0,o.kt)("p",null,"Os elementos numa lista s\xe3o ordenados por um \xedndice, o qual podemos usar para acessar itens espec\xedficos dentro dessa lista.\nVeja o exemplo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"numbers = [1, 3, 5, 7, 9]\n\nprint(numbers[2])\n\n#->> 5\n")),(0,o.kt)("admonition",{title:"\xcdndice A Partir de Zero",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Em Python, o \xedndice de listas come\xe7a no n\xfamero ",(0,o.kt)("strong",{parentName:"p"},"0"),". Portanto, deve-se sempre manter isso em mente quando formos acessar um item pelo seu \xedndice."),(0,o.kt)("p",{parentName:"admonition"},"Por exemplo:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-python"},"numbers = [1, 3, 5, 7, 9]\n\nprint(numbers[0])\n\n#->> 1\n"))),(0,o.kt)("p",null,"Uma funcionalidade \xfatil de listas \xe9 o ",(0,o.kt)("strong",{parentName:"p"},"indexamento negativo"),". Podemos acessar os \xfaltimos elementos de uma lista, mesmo sem saber\nseu tamanho. S\xf3 precisamos fazer:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"numbers = [1, 3, 5, 7, 9]\n\nprint(numbers[-1])\nprint(numbers[-2])\nprint(numbers[-3])\n\n#->> 9\n#->> 7\n#->> 5\n")),(0,o.kt)("p",null,"Utilizando os ",(0,o.kt)("strong",{parentName:"p"},"\xedndices (-1, -2, -3...)"),", somos capazes de acessar os \xfaltimos itens de uma lista."),(0,o.kt)("h3",{id:"len"},"len()"),(0,o.kt)("p",null,"Podemos utilizar a fun\xe7\xe3o ",(0,o.kt)("em",{parentName:"p"},"len()")," para determinar o tamanho de uma lista. Basta fazer:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"numbers = [1, 3, 5, 7, 9]\n\nsize = len(numbers)\n\nprint(size)\n\n#->> 5\n")),(0,o.kt)("h3",{id:"slicing"},(0,o.kt)("em",{parentName:"h3"},"Slicing")),(0,o.kt)("p",null,"Podemos 'fatiar' listas com facilidade em Python, para obter subconjuntos da lista inicial. Para isso, temos que delimitar o \xedndice inicial, ou seja,\nonde come\xe7a o subconjunto, e o \xedndice final, ou seja, onde termina."),(0,o.kt)("p",null,"Veja:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"numbers = [1, 3, 5, 7, 9]\n\nnumbers_1 = numbers[0:4] #-Do indice 0 ao 3\n\nprint(numbers_1)\n\n#-Alternativamente,\n\nnumbers = [1, 3, 5, 7, 9]\n\nnumbers_2 = numbers[:4] #-At\xe9 o indice 3\n\nprint(numbers_2)\n\n#-E tamb\xe9m,\n\nnumbers = numbers[2:]#-A partir do indice 2 at\xe9 o fim da lista\n\nprint(numbers)\n\n#->>[1, 3, 5, 7]\n#->>[1, 3, 5, 7]\n#->>[5, 7, 9]\n")),(0,o.kt)("admonition",{title:"Fatiando Listas",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Perceba que, mesmo o \xfaltimo \xedndice da lista sendo ",(0,o.kt)("strong",{parentName:"p"},"4"),", o \xfaltimo item est\xe1 exclu\xeddo da nova lista. Por que?"),(0,o.kt)("p",{parentName:"admonition"},"Isso acontece pois o primeiro n\xfamero do \xedndice \xe9 inclu\xeddo, e o segundo n\xe3o est\xe1 inclu\xeddo, ou seja,\n\xe9 um intervalo semi-aberto, como ",(0,o.kt)("strong",{parentName:"p"},"[a, b)"),".")),(0,o.kt)("p",null,"Ao fatiar uma lista, uma nova lista \xe9 criada, e a lista original se mant\xe9m inalterada."),(0,o.kt)("p",null,"Note que, tamb\xe9m podemos trabalhar fatiando listas com \xedndices negativos. Veja:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"numbers = [1, 3, 5, 7, 9]\n\nnumbers_1 = numbers[-2:] #-Do pen\xfaltimo ao \xfaltimo\n\nprint(numbers_1)\n\n#-Alternativamente,\n\nnumbers = [1, 3, 5, 7, 9]\n\nnumbers_2 = numbers[:-2] #-At\xe9 o pen\xfaltimo, n\xe3o inclu\xeddo\n\nprint(numbers_2)\n\n#->>[7, 9]\n#->>[1, 3, 5]\n")),(0,o.kt)("admonition",{title:"Dica",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Podemos adicionar um terceiro argumento no fatiamento de listas, especificando o 'salto' que queremos. Como em:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-python"},"numbers = [1, 3, 5, 7, 9]\n\nnumbers_1 = numbers[0:4:2] #-Do indice 0 ao 4, pulando de 2 em 2\n\nprint(numbers_1)\n\n#->>[1, 5]\n"))),(0,o.kt)("h2",{id:"m\xe9todos-de-listas"},"M\xe9todos de Listas"),(0,o.kt)("p",null,"Como qualquer tipo em Python, listas possuem alguns m\xe9todos que facilitam nosso trabalho."),(0,o.kt)("h3",{id:"append"},"append()"),(0,o.kt)("p",null,"O m\xe9todo ",(0,o.kt)("em",{parentName:"p"},"append()")," \xe9 usado para adicionar um elemento ao fim da lista. Toma como argumento o valor do elemento que deseja adicionar.\nVeja:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"odd_numbers = [1, 3, 5, 7, 9]\n\nodd_numbers.append(11)\n\nprint(odd_numbers)\n\n#->>[1, 3, 5, 7, 9, 11]\n")),(0,o.kt)("h3",{id:"remove"},"remove()"),(0,o.kt)("p",null,"O m\xe9todo ",(0,o.kt)("em",{parentName:"p"},"remove()")," nos permite remover um elemento da lista de \xedndice desconhecido, mas com o valor conhecido.\nVeja:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"odd_numbers = [1, 3, 5, 7, 9]\n\nodd_numbers.remove(1)\n\nprint(odd_numbers)\n\n#->>[3, 5, 7, 9]\n")),(0,o.kt)("h3",{id:"count"},"count()"),(0,o.kt)("p",null,"O m\xe9todo ",(0,o.kt)("em",{parentName:"p"},"count()")," toma como argumento um valor e conta a quantidade de ocorr\xeancias dele na lista.\nVeja:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"odd_numbers = [1, 3, 5, 7, 9]\n\noccurencies = odd_numbers.count(5)\n\nprint(occurencies)\n\n#->> 1\n")),(0,o.kt)("h3",{id:"insert"},"insert()"),(0,o.kt)("p",null,"O m\xe9todo ",(0,o.kt)("em",{parentName:"p"},"insert()")," nos permite adicionar um elemento \xe0 lista num \xedndice espec\xedfico. Toma como primeiro argumento um \xedndice (inteiro) e como segundo argumento o valor que ser\xe1 adicionado. Veja:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"numbers = [1, 3, 5, 7, 9]\n\nnumbers.insert(2, 4)\n\nprint(numbers)\n\n#->> [1, 3, 4, 5, 7, 9]\n")),(0,o.kt)("p",null,"Caso o primeiro argumento seja um \xedndice maior que o tamanho da lista atual, o m\xe9todo ir\xe1 inserir o valor no \xfaltimo lugar da lista."),(0,o.kt)("h3",{id:"pop"},"pop()"),(0,o.kt)("p",null,"O m\xe9todo ",(0,o.kt)("em",{parentName:"p"},"pop()")," remove um elemento da lista pelo seu \xedndice, e nos permite retorn\xe1-lo para uso posterior. Toma 1 argumento opcional,\nque \xe9 um inteiro especificando o \xedndice do elemento a ser removido. Se nenhum \xedndice for dado, ",(0,o.kt)("em",{parentName:"p"},"pop()")," remove o \xfaltimo elemento da lista."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"numbers = [1, 3, 5, 7, 9]\n\npopped_number = numbers.pop()\n\nprint(numbers)\nprint(popped_number)\n\n#->> [1, 3, 5, 7]\n#->> 9\n")),(0,o.kt)("h3",{id:"sort"},"sort()"),(0,o.kt)("p",null,"O m\xe9todo ",(0,o.kt)("em",{parentName:"p"},"sort()")," organiza a lista e a coloca em ordem crescente. Toma um par\xe2metro que dita se a ordena\xe7\xe3o deve ser crescente (",(0,o.kt)("em",{parentName:"p"},"default"),") ou reversa,\nisto \xe9, decrescente."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"numbers = [3, 1, 9, 7, 5]\n\nnumbers.sort() \nprint(numbers)\n\n#-Alternativamente,\n\nnumbers.sort(reverse=False)\nprint(numbers)\n\n#-Pode-se fazer tamb\xe9m,\n\nnumbers.sort(reverse=True)\nprint(numbers)\n\n#->> [1, 3, 5, 7, 9]\n#->> [1, 3, 5, 7, 9]\n#->> [9, 7, 5, 3, 1]\n")),(0,o.kt)("p",null,"Uma nota \xe9 que temos que especificar o argumento, em ",(0,o.kt)("em",{parentName:"p"},"reverse=True"),"."),(0,o.kt)("h3",{id:"reverse"},"reverse()"),(0,o.kt)("p",null,"O m\xe9todo ",(0,o.kt)("em",{parentName:"p"},"reverse()")," simplesmente inverte a ordem atual da lista, e n\xe3o toma nenhum argumento."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"numbers = [1, 3, 5, 7, 9]\n\nnumbers.reverse()\n\nprint(numbers)\n\n#->> [9, 7, 5, 3, 1]\n")),(0,o.kt)("h3",{id:"clear"},"clear()"),(0,o.kt)("p",null,"O m\xe9todo ",(0,o.kt)("em",{parentName:"p"},"clear()")," remove todos os elementos de uma lista. N\xe3o toma nenhum argumento."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"numbers = [1, 3, 5, 7, 9]\n\nnumbers.clear()\n\nprint(numbers)\n\n#->> []\n")),(0,o.kt)("h3",{id:"extend"},"extend()"),(0,o.kt)("p",null,"O m\xe9todo ",(0,o.kt)("em",{parentName:"p"},"extend()")," expande a lista, isto \xe9, adiciona ao final dela um iter\xe1vel, passado como argumento."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"numbers = [1, 3, 5, 7, 9]\n\nmore_numbers = [11, 13, 15, 17, 19]\n\nnumbers.extend(more_numbers)\n\nprint(numbers)\n\n#->> [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n")),(0,o.kt)("h3",{id:"copy"},"copy()"),(0,o.kt)("p",null,"O m\xe9todo ",(0,o.kt)("em",{parentName:"p"},"copy()")," simplesmente retorna uma c\xf3pia da lista. N\xe3o toma argumentos."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"numbers = [1, 3, 5, 7, 9]\n\nnumbers_copy = numbers.copy()\n\nprint(numbers_copy)\n\n#->> [1, 3, 5, 7, 9]\n")),(0,o.kt)("h2",{id:"sorted"},"sorted()"),(0,o.kt)("p",null,"A fun\xe7\xe3o ",(0,o.kt)("em",{parentName:"p"},"sorted()")," retorna a lista ordenada, sem modificar a lista original. Toma um argumento adicional, especificando se o reverso (decrescente)\ndeve ser feito, ao iv\xe9s do ",(0,o.kt)("em",{parentName:"p"},"default")," (crescente)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"numbers = [3, 1, 9, 7, 5]\n\nnumbers_sorted = sorted(numbers) \nprint(numbers_sorted)\n\n#-Alternativamente,\n\nnumbers_sorted = sorted(numbers, reverse=False)\nprint(numbers_sorted)\n\n#-Pode-se fazer tamb\xe9m,\n\nnumbers_sorted = sorted(numbers, reverse=True)\nprint(numbers_sorted)\n\n#->> [1, 3, 5, 7, 9]\n#->> [1, 3, 5, 7, 9]\n#->> [9, 7, 5, 3, 1]\n")),(0,o.kt)("admonition",{title:"sorted() x sort()",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"A diferen\xe7a entre os dois s\xe3o duas:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"sorted()")," \xe9 uma fun\xe7\xe3o, e ",(0,o.kt)("em",{parentName:"li"},"sort()")," \xe9 um m\xe9todo (n\xe3o se preocupe com a diferen\xe7a agora)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"sorted()")," n\xe3o modifica a lista original, e retorna uma lista nova ordenada, ",(0,o.kt)("em",{parentName:"li"},"sort()")," modifica a lista original."))),(0,o.kt)("h2",{id:"descompacta\xe7\xe3o-de-listas"},"Descompacta\xe7\xe3o de Listas"),(0,o.kt)("p",null,'Caso saibamos quantos elementos uma lista cont\xe9m, podemos descompact\xe1-la. Caso n\xe3o queiramos algum valor, podemos usar "_" para jogar o valor fora. Como em:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"numbers = [1, 2, 3]\n\n_, x, y = numbers\n\nprint(x)\nprint(y)\n\n#->> 2\n#->> 3\n")),(0,o.kt)("h2",{id:"compreens\xe3o-de-listas"},"Compreens\xe3o de Listas"),(0,o.kt)("p",null,"Uma funcionalidade extremamente \xfatil em Python \xe9 a compreens\xe3o de listas. Podemos usar senten\xe7as l\xf3gicas e estruturas de controle de fluxo para\ncriar listas. Iremos utilizar essas compreens\xf5es em diversos cen\xe1rios. A compreens\xe3o de listas segue um modelo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"[operation for item in list]\n")),(0,o.kt)("p",null,"Veja um exemplo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"even_numbers = [x for x in range(20) if x % 2 == 0]\n\nprint(even_numbers)\n\nsquares = [x**2 for x in range(10)]\n\nprint(squares)\n\npairs = [(x, y)\n         for x in range(3)\n         for y in range(3)]\n\nprint(pairs)\n\n#->> [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n#->> [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n#->> [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]\n")),(0,o.kt)("h2",{id:"zip"},"zip()"),(0,o.kt)("p",null,"A fun\xe7\xe3o ",(0,o.kt)("em",{parentName:"p"},"zip()")," nos permite combinar listas sem precisar utilizar listas 2D. \xc9 \xfatil em diversos cen\xe1rios.\nConsidere o exemplo abaixo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"names = [\"Jenny\", \"Karl\", \"Sam\", \"Grace\"]\nages = [19, 21, 24, 22]\n\nnames_and_ages = zip(names, ages)\n\n#-Precisamos converter de volta \xe1 uma lista para exibir o resultado:\n\nnames_and_ages = list(names_and_ages)\nprint(names_and_ages)\n\n#->> [('Jenny', 19), ('Karl', 21), ('Sam', 24), ('Grace', 22)]\n")),(0,o.kt)("p",null,"Os elementos na lista s\xe3o ",(0,o.kt)("strong",{parentName:"p"},"tuplas"),", um tipo de dado em Python. Vamos falar mais sobre ele em se\xe7\xf5es posteriores."),(0,o.kt)("h2",{id:"conclus\xe3o-"},"Conclus\xe3o \ud83c\udf91"),(0,o.kt)("p",null,"Bom, essa se\xe7\xe3o termina aqui. Caso tenha alguma d\xfavida que n\xe3o conseguiu encontrar online, envie para ",(0,o.kt)("a",{parentName:"p",href:"mailto:raphaelsoaresbrasil@gmail.com."},"raphaelsoaresbrasil@gmail.com."),"\nObrigado pela aten\xe7\xe3o, e bons estudos."))}d.isMDXComponent=!0}}]);