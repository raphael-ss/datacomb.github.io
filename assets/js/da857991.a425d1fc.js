"use strict";(self.webpackChunkdatacomb=self.webpackChunkdatacomb||[]).push([[239],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>k});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var p=n.createContext({}),m=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},l=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=m(a),c=o,k=d["".concat(p,".").concat(c)]||d[c]||u[c]||r;return a?n.createElement(k,i(i({ref:t},l),{},{components:a})):n.createElement(k,i({ref:t},l))}));function k(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=c;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var m=2;m<r;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},6326:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var n=a(7462),o=(a(7294),a(3905));const r={sidebar_position:3,slug:"/docs/programacao/python-strings",title:"Python - Strings",description:"Strings em Python"},i="Python - Strings",s={unversionedId:"prog1/python-strings",id:"prog1/python-strings",title:"Python - Strings",description:"Strings em Python",source:"@site/docs/prog1/python-strings.md",sourceDirName:"prog1",slug:"/docs/programacao/python-strings",permalink:"/docs/programacao/python-strings",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,slug:"/docs/programacao/python-strings",title:"Python - Strings",description:"Strings em Python"},sidebar:"tutorialSidebar",previous:{title:"Python - Listas",permalink:"/docs/programacao/python-listas"},next:{title:"Python - Controle de Desvio e Fluxo",permalink:"/docs/programacao/python-controwflow"}},p={},m=[{value:"Caracteres de Escape",id:"caracteres-de-escape",level:2},{value:"Operador <code>in</code>",id:"operador-in",level:2},{value:"\xcdndices e <em>Slicing</em>",id:"\xedndices-e-slicing",level:2},{value:"<code>len()</code>",id:"len",level:2},{value:"Concatena\xe7\xe3o e Formata\xe7\xe3o",id:"concatena\xe7\xe3o-e-formata\xe7\xe3o",level:2},{value:"M\xe9todos de <em>Strings</em>",id:"m\xe9todos-de-strings",level:3},{value:"<code>count()</code>",id:"count",level:3},{value:"<code>capitalize()</code>, <code>title()</code>",id:"capitalize-title",level:3},{value:"<code>upper()</code>",id:"upper",level:3},{value:"<code>lower()</code>",id:"lower",level:3},{value:"<code>casefold()</code>",id:"casefold",level:3},{value:"<code>find()</code>, <code>rfind()</code>",id:"find-rfind",level:3},{value:"<code>isdigit()</code>, <code>isdecimal()</code>",id:"isdigit-isdecimal",level:3},{value:"<code>islower()</code>, <code>isupper()</code>",id:"islower-isupper",level:3},{value:"<code>isspace()</code>",id:"isspace",level:3},{value:"<code>replace()</code>",id:"replace",level:3},{value:"<code>strip()</code>",id:"strip",level:3},{value:"<code>split()</code>",id:"split",level:3},{value:"<code>join()</code>",id:"join",level:3},{value:"Conclus\xe3o \ud83c\udf91",id:"conclus\xe3o-",level:2}],l={toc:m},d="wrapper";function u(e){let{components:t,...a}=e;return(0,o.kt)(d,(0,n.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"python---strings"},"Python - Strings"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Strings")," s\xe3o ",(0,o.kt)("strong",{parentName:"p"},"sequ\xeancias de caracteres")," (letras, n\xfameros, s\xedmbolos e espa\xe7os) usadas para representar texto em linguagens de programa\xe7\xe3o. Em Python, as ",(0,o.kt)("em",{parentName:"p"},"strings")," s\xe3o delimitadas por aspas simples (' ') ou aspas duplas (\" \"), o que permite ao interpretador identificar o in\xedcio e o fim do texto."),(0,o.kt)("p",null,"As ",(0,o.kt)("em",{parentName:"p"},"strings")," s\xe3o imut\xe1veis em Python, o que significa que, uma vez criadas, seus valores n\xe3o podem ser alterados. No entanto, \xe9 poss\xedvel criar novas strings a partir das originais, aplicando opera\xe7\xf5es e m\xe9todos do tipo."),(0,o.kt)("p",null,"Uma discuss\xe3o presente em aulas de programa\xe7\xe3o \xe9 sobre como funcionam as ",(0,o.kt)("em",{parentName:"p"},"strings"),", de um ponto de vista de mais baixo n\xedvel (menor abstra\xe7\xe3o de conceitos).\nEm linguagens como C, que n\xe3o possuem um tipo ",(0,o.kt)("em",{parentName:"p"},"string")," propriamente dito, podemos manipular vetores e matrizes de caracteres para trabalhar com ",(0,o.kt)("em",{parentName:"p"},"strings"),".\nVisto que um texto n\xe3o possui tamanho definido, um valor nulo, conhecido como ",(0,o.kt)("inlineCode",{parentName:"p"},"\\0")," \xe9 usado para denotar o fim de ",(0,o.kt)("em",{parentName:"p"},"strings")," em computa\xe7\xe3o."),(0,o.kt)("p",null,"Felizmente, Python usa aloca\xe7\xe3o de mem\xf3ria din\xe2mica e autom\xe1tica para todos os seus tipos, portanto n\xe3o temos que nos preocupar com isso."),(0,o.kt)("p",null,"Na se\xe7\xe3o de ",(0,o.kt)("a",{parentName:"p",href:"/docs/programacao/python-basic.md"},"Python B\xe1sico"),", vimos o b\xe1sico de strings. Nessa se\xe7\xe3o, aprenderemos sobre strings de um ponto de\nvista mais avan\xe7ado. "),(0,o.kt)("p",null,"Trabalhar com strings em Python \xe9 muito importante, portanto se atente aos detalhes nesses t\xf3picos."),(0,o.kt)("h2",{id:"caracteres-de-escape"},"Caracteres de Escape"),(0,o.kt)("p",null,"Para sinalizar quebras de linha ou tabula\xe7\xf5es, ou escapar caracteres de uma ",(0,o.kt)("em",{parentName:"p"},"string"),", usamos caracteres de escape. Os dois mais\nutilizados s\xe3o:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"\\n"),":")),(0,o.kt)("p",null,"Esse caractere sinaliza uma ",(0,o.kt)("strong",{parentName:"p"},"quebra de linha"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"\\t"),":")),(0,o.kt)("p",null,"Esse caractere sinaliza uma ",(0,o.kt)("strong",{parentName:"p"},"tabula\xe7\xe3o"),"."),(0,o.kt)("p",null,"Para utilizar aspas duplas numa ",(0,o.kt)("em",{parentName:"p"},"string")," denotada por aspas duplas, fa\xe7a:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'txt = "He said \\"I love apples\\"."\nprint(txt) \n\n#->> He said "I love apples".\n')),(0,o.kt)("h2",{id:"operador-in"},"Operador ",(0,o.kt)("inlineCode",{parentName:"h2"},"in")),(0,o.kt)("p",null,"Uma funcionalidade bem \xfatil e interessante em Python \xe9 que podemos tratar ",(0,o.kt)("em",{parentName:"p"},"strings")," como listas de caracteres, e performar\nfatiamento, selecionar caracteres a partir do \xedndice, e utilizar o operador ",(0,o.kt)("inlineCode",{parentName:"p"},"in"),"."),(0,o.kt)("p",null,"Caso n\xe3o lembre, o operador ",(0,o.kt)("inlineCode",{parentName:"p"},"in")," denota se um item est\xe1 contido numa lista. Similarmente, se usado com ",(0,o.kt)("em",{parentName:"p"},"strings"),", ele retorna\n",(0,o.kt)("inlineCode",{parentName:"p"},"True")," se a ",(0,o.kt)("em",{parentName:"p"},"substring")," ou caractere est\xe1 contido, e ",(0,o.kt)("inlineCode",{parentName:"p"},"False")," se n\xe3o est\xe1."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'txt = "I love apples."\nprint("apples" in txt)\nprint("z" in txt)\n\n#->> True\n#->> False\n')),(0,o.kt)("h2",{id:"\xedndices-e-slicing"},"\xcdndices e ",(0,o.kt)("em",{parentName:"h2"},"Slicing")),(0,o.kt)("p",null,"Como mencionei, podemos tratar ",(0,o.kt)("em",{parentName:"p"},"strings")," como listas em Python. Podemos acessar um caractere pelo seu \xedndice, e criar ",(0,o.kt)("em",{parentName:"p"},"substrings")," a\npartir da ",(0,o.kt)("em",{parentName:"p"},"string")," original. Basta fazer:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'txt = "To be or not to be, that is the question."\nprint(txt[0])\nprint(txt[13:18])\n\n#->> T\n#->> to be\n')),(0,o.kt)("p",null,"Para um exemplo mais complicado, vamos fatiar uma ",(0,o.kt)("em",{parentName:"p"},"string")," e trocar a ordem das frases nela:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'txt = "To be or not to be, that is the question."\n\nfirst_half = txt[:18] #-"To be or not to be"\nsecond_half = txt[20:-1] #-"that is the question"\n\n#-Aqui, tornamos mai\xfascula a primeira letra da segunda metade, e tornamos a primeira metade toda min\xfascula;\nsecond_half = second_half.capitalize()\nfirst_half = first_half.lower()\n\n#-Aqui, imprimimos o resultado, concatenando espa\xe7os e pontua\xe7\xe3o.\nprint(second_half + ": " + first_half + ".")\n\n#->> That is the question: to be or not to be.\n')),(0,o.kt)("p",null,"Para mais informa\xe7\xf5es sobre \xedndices e ",(0,o.kt)("em",{parentName:"p"},"slicing"),", leia o ",(0,o.kt)("a",{parentName:"p",href:"/docs/programacao/python-lists.md"},"artigo sobre listas"),"."),(0,o.kt)("h2",{id:"len"},(0,o.kt)("inlineCode",{parentName:"h2"},"len()")),(0,o.kt)("p",null,"Tamb\xe9m podemos usar a fun\xe7\xe3o ",(0,o.kt)("inlineCode",{parentName:"p"},"len()")," para descobrir o tamanho de uma ",(0,o.kt)("em",{parentName:"p"},"string"),", como em listas."),(0,o.kt)("p",null,"Veja:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'txt = "Elementary, my dear Watson."\n\ntxt_size = len(txt)\n\nprint(txt_size)\n\n#->> 27\n')),(0,o.kt)("h2",{id:"concatena\xe7\xe3o-e-formata\xe7\xe3o"},"Concatena\xe7\xe3o e Formata\xe7\xe3o"),(0,o.kt)("p",null,"Podemos concatenar ",(0,o.kt)("em",{parentName:"p"},"strings")," de forma bem simples, com o operador ",(0,o.kt)("inlineCode",{parentName:"p"},"+"),". Basta 'somar' uma ",(0,o.kt)("em",{parentName:"p"},"string")," com a outra, e uma nova ser\xe1 criada. Veja:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'txt_1 = "Whatever you are"\ntxt_2 = "be a good one."\n\nquote = txt_1 + ", " + txt_2\nprint(quote)\n\n#->> Whatever you are, be a good one.\n')),(0,o.kt)("p",null,"Uma funcionalidade bastante \xfatil que usaremos muito \xe9 a formata\xe7\xe3o de ",(0,o.kt)("em",{parentName:"p"},"strings"),". Usamos para incluir valores de vari\xe1veis em\nsa\xeddas, ou para criar ",(0,o.kt)("em",{parentName:"p"},"strings")," com esses valores. Pode ser feita de algumas formas:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'name = "Albert Einstein"\nage = 76\nquote = "Life is like riding a bicycle, to keep your balance, you must keep moving"\n\n#-Pode ser feito dessa forma:\nprint("{name} said the quote: {quote}. {name} passed away at the age of {age_of_death}."\n      .format(name=name, quote=quote, age_of_death=age))\n\n#-Ou dessa:\nprint(f"Quoting {name}: {quote}. {name} passed away at the age of {age}.")\n\n#-Ou dessa:\nprint("{} said the quote: {}. {} passed away at the age of {}."\n      .format(name, quote, name, age))\n\n#->> Albert Einstein said the quote: Life is like riding a bicycle, to keep your balance, you must keep moving. Albert Einstein passed away at the age of 76.\n#->> Quoting Albert Einstein: Life is like riding a bicycle, to keep your balance, you must keep moving. Albert Einstein passed away at the age of 76.\n#->> Albert Einstein said the quote: Life is like riding a bicycle, to keep your balance, you must keep moving. Albert Einstein passed away at the age of 76.\n')),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"M\xe9todo ",(0,o.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"format()")," x ",(0,o.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"f")," ",(0,o.kt)("em",{parentName:"mdxAdmonitionTitle"},"string")),(0,o.kt)("p",{parentName:"admonition"},"A diferen\xe7a \xe9 simples: o m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"format()")," exige que as refer\xeancias dentro dos colchetes sejam especificadas.\nIsso significa que voc\xea pode usar nomes diferentes dos nomes das vari\xe1veis, e especificar depois qual refer\xeancia \xe9 qual vari\xe1vel. "),(0,o.kt)("p",{parentName:"admonition"},"Pode-se fazer ",(0,o.kt)("inlineCode",{parentName:"p"},"format()")," dos dois jeitos apresentados, mas \xe9 not\xe1vel que o primeiro \xe9 mais prefer\xedvel, pois o segundo jeito\nabre mais chance para erros, e \xe9 o menos leg\xedvel dos 3 m\xe9todos apresentados."),(0,o.kt)("p",{parentName:"admonition"},"J\xe1 a ",(0,o.kt)("em",{parentName:"p"},"fstring")," tem que conter o nome das vari\xe1veis no colchete, se n\xe3o um erro ser\xe1 lan\xe7ado."),(0,o.kt)("p",{parentName:"admonition"},"N\xf3s vamos utilizar mais o segundo m\xe9todo, visto que as vari\xe1veis t\xeam que ter nomes significativos (o problema com esse m\xe9todo seria um problema com a legibilidade dos nomes das vari\xe1veis), e o m\xe9todo tem uma apar\xeancia mais limpa.")),(0,o.kt)("h3",{id:"m\xe9todos-de-strings"},"M\xe9todos de ",(0,o.kt)("em",{parentName:"h3"},"Strings")),(0,o.kt)("p",null,"Assim como qualquer grande tipo de Python, ",(0,o.kt)("em",{parentName:"p"},"strings")," possuem diversos m\xe9todos que nos possibilitam trabalhar melhor com elas. "),(0,o.kt)("h3",{id:"count"},(0,o.kt)("inlineCode",{parentName:"h3"},"count()")),(0,o.kt)("p",null,"Podendo tamb\xe9m ser usado com listas, o m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"count()")," toma 1 argumento, que \xe9 o caractere ou ",(0,o.kt)("em",{parentName:"p"},"substring")," a ser contado na ",(0,o.kt)("em",{parentName:"p"},"string"),", e retorna\no n\xfamero de vezes que o argumento especificado aparece. Veja;"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'txt = "Could you buy some apples? I want to make applepie."\n\nprint(txt.count("apples"))\nprint(txt.count("apple"))\n\n#->> 1\n#->> 2\n')),(0,o.kt)("h3",{id:"capitalize-title"},(0,o.kt)("inlineCode",{parentName:"h3"},"capitalize()"),", ",(0,o.kt)("inlineCode",{parentName:"h3"},"title()")),(0,o.kt)("p",null,"O m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"capitalize()")," n\xe3o toma argumentos, retorna a ",(0,o.kt)("em",{parentName:"p"},"string")," com a primeira letra mai\xfascula, e o resto min\xfascula. Similarmente, o m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"title()")," n\xe3o toma argumentos,\nmas torna a ",(0,o.kt)("em",{parentName:"p"},"string")," um t\xedtulo, ou seja, todos os primeiros caracteres s\xe3o tornados mai\xfasculos. Veja:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'quote = "the best way to find out if you can trust somebody is to trust them."\n\nprint(quote.capitalize())\n\nprint(quote.title())\n\n#->> The best way to find out if you can trust somebody is to trust them.\n#->> The Best Way To Find Out If You Can Trust Somebody Is To Trust Them.\n')),(0,o.kt)("h3",{id:"upper"},(0,o.kt)("inlineCode",{parentName:"h3"},"upper()")),(0,o.kt)("p",null,"O m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"upper()")," n\xe3o toma argumentos, e retorna a ",(0,o.kt)("em",{parentName:"p"},"string")," completamente em letras mai\xfasculas."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'quote = "the best way to find out if you can trust somebody is to trust them."\n\nquote = quote.upper()\n\nprint(quote)\n\n#->> THE BEST WAY TO FIND OUT IF YOU CAN TRUST SOMEBODY IS TO TRUST THEM.\n')),(0,o.kt)("h3",{id:"lower"},(0,o.kt)("inlineCode",{parentName:"h3"},"lower()")),(0,o.kt)("p",null,"O m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"lower()")," n\xe3o toma argumentos, e retorna a ",(0,o.kt)("em",{parentName:"p"},"string")," completamente em letras min\xfasculas. Veja:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'quote = "The Best Way To Find Out If You Can Trust Somebody Is To Trust Them."\n\nquote = quote.lower()\n\nprint(quote)\n\n#->> the best way to find out if you can trust somebody is to trust them.\n')),(0,o.kt)("h3",{id:"casefold"},(0,o.kt)("inlineCode",{parentName:"h3"},"casefold()")),(0,o.kt)("p",null,"O m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"casefold()")," \xe9 similar ao m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"lower()"),": transforma toda a ",(0,o.kt)("em",{parentName:"p"},"string")," em letras min\xfasculas: "),(0,o.kt)("p",null,"A diferen\xe7a \xe9 que o ",(0,o.kt)("inlineCode",{parentName:"p"},"casefold()")," \xe9 mais robusto em compara\xe7\xf5es de strings, garantindo que diferen\xe7as em caracteres acentuados ou especiais n\xe3o afetem a compara\xe7\xe3o, tornando-o mais seguro para uso em contextos multil\xedngues ou em situa\xe7\xf5es que requerem compara\xe7\xf5es insens\xedveis a mai\xfasculas e min\xfasculas precisas. "),(0,o.kt)("p",null,"Por\xe9m, ele \xe9 menos efetivo em rapidez e desempenho."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'quote = "The Best Way To Find Out If You Can Trust Somebody Is To Trust Them."\n\nquote = quote.casefold()\n\nprint(quote)\n\n#->> the best way to find out if you can trust somebody is to trust them.\n')),(0,o.kt)("h3",{id:"find-rfind"},(0,o.kt)("inlineCode",{parentName:"h3"},"find()"),", ",(0,o.kt)("inlineCode",{parentName:"h3"},"rfind()")),(0,o.kt)("p",null,"Esses m\xe9todos tomam at\xe9 3 argumentos: o primeiro \xe9 um caractere ou ",(0,o.kt)("em",{parentName:"p"},"substring")," para procurar, o segundo \xe9 um inteiro que denota a restri\xe7\xe3o do in\xedcio, e um inteiro que denota a restri\xe7\xe3o do final. Ambos os \xfaltimos argumentos s\xe3o opcionais. O m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"find()")," procura o primeiro argumento na ",(0,o.kt)("em",{parentName:"p"},"string")," e retorna o ",(0,o.kt)("strong",{parentName:"p"},"primeiro")," \xedndice no qual ele foi encontrado, e o m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"rfind()")," retorna o ",(0,o.kt)("strong",{parentName:"p"},"\xfaltimo")," \xedndice onde foi encontrado. Veja:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'txt = "I made wasabi yesterday, it was delicious!"\n\nchar_index = txt.find("w")\n\n#-Aqui, come\xe7amos a partir do \xedndice 13 at\xe9 o fim, para que o m\xe9todo nao encontre o \'was\' de \'wasabi\'.\nwas_index = txt.find("was", 13)\n\n#-Alternativamente, podemos fazer com o m\xe9todo \'rfind()\'\nwas_index_1 = txt.rfind("was")\n\nprint(char_index)\nprint(was_index)\nprint(was_index_1)\n\n#->> 7\n#->> 28\n#->> 28\n')),(0,o.kt)("h3",{id:"isdigit-isdecimal"},(0,o.kt)("inlineCode",{parentName:"h3"},"isdigit()"),", ",(0,o.kt)("inlineCode",{parentName:"h3"},"isdecimal()")),(0,o.kt)("p",null,"Esses m\xe9todos retornam ",(0,o.kt)("inlineCode",{parentName:"p"},"True")," se todos os caracteres forem d\xedgitos. A diferen\xe7a \xe9 que o ",(0,o.kt)("inlineCode",{parentName:"p"},"isdigit()")," tamb\xe9m funciona com expoentes, e o ",(0,o.kt)("inlineCode",{parentName:"p"},"isdecimal()")," s\xf3 funciona com d\xedgitos decimais.\nN\xe3o tomam argumentos. Veja:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'#-Neste exemplo, trabalhamos com CPF como uma string. \n#-\xc9 uma decis\xe3o mais precavida, visto que strings s\xe3o imut\xe1veis.\ncpf = "12365478910"\n\nprint(cpf.isdecimal())\n\n#->> True\n')),(0,o.kt)("h3",{id:"islower-isupper"},(0,o.kt)("inlineCode",{parentName:"h3"},"islower()"),", ",(0,o.kt)("inlineCode",{parentName:"h3"},"isupper()")),(0,o.kt)("p",null,"O m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"islower()")," retorna ",(0,o.kt)("inlineCode",{parentName:"p"},"True")," se todos os caracteres forem min\xfasculos, e ",(0,o.kt)("inlineCode",{parentName:"p"},"False")," em outro caso. J\xe1 o m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"isupper()")," retorna ",(0,o.kt)("inlineCode",{parentName:"p"},"True")," se todos forem mai\xfasculos,\ne ",(0,o.kt)("inlineCode",{parentName:"p"},"False")," em outros casos. Ambos n\xe3o tomam argumentos. Veja:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'upper_txt = "I WILL SURVIVE"\n\nlwr_txt = "i will survive"\n\nprint(upper_txt.isupper())\nprint(upper_txt.islower())\n\nprint(lwr_txt.isupper())\nprint(lwr_txt.islower())\n\n#->> True\n#->> False\n#->> False\n#->> True\n')),(0,o.kt)("h3",{id:"isspace"},(0,o.kt)("inlineCode",{parentName:"h3"},"isspace()")),(0,o.kt)("p",null,"O m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"isspace()")," n\xe3o toma argumentos e retorna ",(0,o.kt)("inlineCode",{parentName:"p"},"True")," se os caracteres da ",(0,o.kt)("em",{parentName:"p"},"string")," forem ",(0,o.kt)("em",{parentName:"p"},"whitespace"),". Veja: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'white_spc = "        \\n"\n\nprint(white_spc.isspace())\n\n#->> True\n')),(0,o.kt)("h3",{id:"replace"},(0,o.kt)("inlineCode",{parentName:"h3"},"replace()")),(0,o.kt)("p",null,"O m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"replace()")," toma 3 argumentos: o 1\xb0 \xe9 o valor a ser procurado e substitu\xeddo (obrigat\xf3rio), o 2\xb0 \xe9 o valor para substituir (obrigat\xf3rio), e o 3\xb0 \xe9 o n\xb0 de ocorr\xeancias\ndde substitui\xe7\xe3o (opcional, ",(0,o.kt)("em",{parentName:"p"},"Default")," \xe9 todas as ocorr\xeancias). Veja:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'txt = "I have two sons, two daughters and two dogs."\n\nprint(txt.replace("two", "three"))\n\nprint(txt.replace("two", "three", 2))\n\n#->> I have three sons, three daughters and three dogs.\n#->> I have three sons, three daughters and two dogs.\n')),(0,o.kt)("h3",{id:"strip"},(0,o.kt)("inlineCode",{parentName:"h3"},"strip()")),(0,o.kt)("p",null,"O m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"strip()")," remove dos lados extremos da ",(0,o.kt)("em",{parentName:"p"},"string")," qualquer valor especificado como argumento. O ",(0,o.kt)("em",{parentName:"p"},"default")," \xe9 ",(0,o.kt)("em",{parentName:"p"},"whitespace"),". "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'spaced_str = "       Murder, she wrote.      "\ndirty_str = ";;;;;Murder, she wrote.;;;;;"\n\nclean_str = spaced_str.strip()\n\ncleaner_str = dirty_str.strip(";")\n\nprint(clean_str)\nprint(cleaner_str)\n\n#->> Murder, she wrote.\n#->> Murder, she wrote.\n')),(0,o.kt)("h3",{id:"split"},(0,o.kt)("inlineCode",{parentName:"h3"},"split()")),(0,o.kt)("p",null,"O m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"split()")," separa uma ",(0,o.kt)("em",{parentName:"p"},"string")," num identificador especificado como argumento, e retorna uma lista. O ",(0,o.kt)("em",{parentName:"p"},"default")," \xe9 qualquer ",(0,o.kt)("em",{parentName:"p"},"whitespace"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"txt = \"I;love;dogs;and;cats\"\nwords = txt.split(\";\")\n\nprint(words)\n\n#->> ['I', 'love', 'dogs', 'and', 'cats']\n")),(0,o.kt)("h3",{id:"join"},(0,o.kt)("inlineCode",{parentName:"h3"},"join()")),(0,o.kt)("p",null,"O m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"join()")," toma como argumento um iter\xe1vel (lista, tupla, etc.) e junta todos os itens numa ",(0,o.kt)("em",{parentName:"p"},"string"),". Como isso \xe9 um m\xe9todo de ",(0,o.kt)("em",{parentName:"p"},"string"),", a ",(0,o.kt)("em",{parentName:"p"},"string")," separadora deve ser especificada.\nVeja:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'names = ["John", "Karl", "Jane", "Bob", "Mary"]\n\nnames_str = ", ".join(names)\n\nprint(names_str)\n\n#->> John, Karl, Jane, Bob, Mary\n')),(0,o.kt)("p",null,"Existem outros m\xe9todos de ",(0,o.kt)("em",{parentName:"p"},"string"),". Para mais informa\xe7\xf5es, ",(0,o.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#string-methods"},"acesse a documenta\xe7\xe3o"),"."),(0,o.kt)("h2",{id:"conclus\xe3o-"},"Conclus\xe3o \ud83c\udf91"),(0,o.kt)("p",null,"Bom, essa se\xe7\xe3o termina aqui. Caso tenha alguma d\xfavida que n\xe3o conseguiu encontrar online, envie para ",(0,o.kt)("a",{parentName:"p",href:"mailto:raphaelsoaresbrasil@gmail.com."},"raphaelsoaresbrasil@gmail.com."),"\nObrigado pela aten\xe7\xe3o, e bons estudos."))}u.isMDXComponent=!0}}]);